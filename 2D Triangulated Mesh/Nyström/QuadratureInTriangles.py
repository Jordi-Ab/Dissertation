"""
Holds the necessary functions to compute Gaussian quadrature
on triangular elements.
"""

from numpy import array

#Nodal Basis Functions for Mapping to a canonical reference triangle. 
_N1 = lambda x_hat, y_hat: 1 - x_hat - y_hat
_N2 = lambda x_hat, y_hat: x_hat
_N3 = lambda x_hat, y_hat: y_hat

# Function that maps any point in the element K using its vertices and
# the coordinates of that point inside a reference triangle
def mapX(v1, v2, v3, x_hat, y_hat):
    """
    v1, v2, v3 are lists containing x and y
    i.e. v1 = [x1, y1], and represent the vertices of a triangular element.
    x_hat is the x value of a point inside the refernce triangle
    y_hat is the y value of a point inside the reference triangle
    """
    # Map gauss points inside the triangle using the Nodal Basis Functions
    x = v1[0]*_N1(x_hat, y_hat) + v2[0]*_N2(x_hat, y_hat) + v3[0]*_N3(x_hat, y_hat)
    y = v1[1]*_N1(x_hat, y_hat) + v2[1]*_N2(x_hat, y_hat) + v3[1]*_N3(x_hat, y_hat)
    return array([x, y])

def computeArea(v1, v2, v3):
	"""
	compute the area of a triangular element K given
	its vertices v1,v2,v3.
	v1, v2, v3 are lists containing x and y coordinates
    i.e. v1 = [x1, y1]
	"""
	x1, y1 = v1; x2, y2 = v2; x3, y3 = v3;
	A = abs( x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2) )/2.0
	return A

def getWeightsAndPoints(n):
	"""
	Weights and points of a Gaussian quadrature rule
	for a reference triangle \hat \kappa.
	"""
	if (n == 1):
		xw=[1/3, 1/3, 1]
	elif (n == 2):
		xw=[[1/6, 1/6, 1/3],
			[1/6, 2/3, 1/3], 
			[2/3, 1/6, 1/3]]
	elif (n == 3):
		xw=[[1/3, 1/3, -27/48],
			[3/5, 1/5, 25/48],
			[1/5, 1/5, 25/48],
			[1/5, 3/5, 25/48]]
	elif (n == 4):
		xw=[[0.44594849091597, 0.44594849091597, 0.22338158967801],
			[0.44594849091597, 0.10810301816807, 0.22338158967801],
			[0.10810301816807, 0.44594849091597, 0.22338158967801], 
			[0.09157621350977, 0.09157621350977, 0.10995174365532], 
			[0.09157621350977, 0.81684757298046, 0.10995174365532], 
			[0.81684757298046, 0.09157621350977, 0.10995174365532]]
	elif(n == 5):
		xw=[[0.33333333333333, 0.33333333333333, 0.22500000000000],
			[0.47014206410511, 0.47014206410511, 0.13239415278851], 
			[0.47014206410511, 0.05971587178977, 0.13239415278851], 
			[0.05971587178977, 0.47014206410511, 0.13239415278851], 
			[0.10128650732346, 0.10128650732346, 0.12593918054483], 
			[0.10128650732346, 0.79742698535309, 0.12593918054483], 
			[0.79742698535309, 0.10128650732346, 0.12593918054483]]
	elif(n == 6):
		xw=[[0.24928674517091, 0.24928674517091, 0.11678627572638],
			[0.24928674517091, 0.50142650965818, 0.11678627572638], 
			[0.50142650965818, 0.24928674517091, 0.11678627572638], 
			[0.06308901449150, 0.06308901449150, 0.05084490637021], 
			[0.06308901449150, 0.87382197101700, 0.05084490637021], 
			[0.87382197101700, 0.06308901449150, 0.05084490637021], 
			[0.31035245103378, 0.63650249912140, 0.08285107561837], 
			[0.63650249912140, 0.05314504984482, 0.08285107561837], 
			[0.05314504984482, 0.31035245103378, 0.08285107561837], 
			[0.63650249912140, 0.31035245103378, 0.08285107561837], 
			[0.31035245103378, 0.05314504984482, 0.08285107561837], 
			[0.05314504984482, 0.63650249912140, 0.08285107561837]]
	elif(n == 7):
		xw=[[0.33333333333333, 0.33333333333333, -0.14957004446768],
			[0.26034596607904, 0.26034596607904, 0.17561525743321], 
			[0.26034596607904, 0.47930806784192, 0.17561525743321], 
			[0.47930806784192, 0.26034596607904, 0.17561525743321], 
			[0.06513010290222, 0.06513010290222, 0.05334723560884], 
			[0.06513010290222, 0.86973979419557, 0.05334723560884], 
			[0.86973979419557, 0.06513010290222, 0.05334723560884],
			[0.31286549600487, 0.63844418856981, 0.07711376089026], 
			[0.63844418856981, 0.04869031542532, 0.07711376089026], 
			[0.04869031542532, 0.31286549600487, 0.07711376089026], 
			[0.63844418856981, 0.31286549600487, 0.07711376089026], 
			[0.31286549600487, 0.04869031542532, 0.07711376089026], 
			[0.04869031542532, 0.63844418856981, 0.07711376089026]]
	elif(n == 8):
		xw=[[0.33333333333333, 0.33333333333333, 0.14431560767779],
			[0.45929258829272, 0.45929258829272, 0.09509163426728], 
			[0.45929258829272, 0.08141482341455, 0.09509163426728], 
			[0.08141482341455, 0.45929258829272, 0.09509163426728], 
			[0.17056930775176, 0.17056930775176, 0.10321737053472], 
			[0.17056930775176, 0.65886138449648, 0.10321737053472], 
			[0.65886138449648, 0.17056930775176, 0.10321737053472], 
			[0.05054722831703, 0.05054722831703, 0.03245849762320], 
			[0.05054722831703, 0.89890554336594, 0.03245849762320], 
			[0.89890554336594, 0.05054722831703, 0.03245849762320], 
			[0.26311282963464, 0.72849239295540, 0.02723031417443],
			[0.72849239295540, 0.00839477740996, 0.02723031417443], 
			[0.00839477740996, 0.26311282963464, 0.02723031417443], 
			[0.72849239295540, 0.26311282963464, 0.02723031417443], 
			[0.26311282963464, 0.00839477740996, 0.02723031417443], 
			[0.00839477740996, 0.72849239295540, 0.02723031417443]]
	else:
		print("Haven't computed points for that degree.")
		xw = np.zeros(n, 3)

	return array(xw)