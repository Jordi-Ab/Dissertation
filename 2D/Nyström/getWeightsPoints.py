"""
Weights and Points for Gaussian Quadrature 
on the interval [-1,1]
"""

from numpy import zeros

def getWeightsAndPoints(n):
    weights = zeros(n)
    points = zeros(n)
    if (n == 1):
        weights[0] = 2.0;
        points[0] = 0.0;
    elif (n == 2):
        weights[0] = 1.0;
        points[0] = -0.5773502691896257;
        weights[1] = 1.0;
        points[1] = 0.5773502691896257;
    elif (n == 3):
        weights[0] = 0.5555555555555556;
        points[0] = -0.7745966692414834;
        weights[1] = 0.8888888888888888;
        points[1] = 0.0000000000000000;
        weights[2] = 0.5555555555555556;
        points[2] = 0.7745966692414834;
    elif (n == 4):
        weights[0] = 0.3478548451374538;
        points[0] = -0.8611363115940526;
        weights[1] = 0.6521451548625461;
        points[1] = -0.3399810435848563;
        weights[2] = 0.6521451548625461;
        points[2] = 0.3399810435848563;
        weights[3] = 0.3478548451374538;
        points[3] = 0.8611363115940526;
    elif (n == 5):
        weights[0] = 0.2369268850561891;
        points[0] = -0.9061798459386640;
        weights[1] = 0.4786286704993665;
        points[1] = -0.5384693101056831;
        weights[2] = 0.5688888888888889;
        points[2] = 0.0000000000000000;
        weights[3] = 0.4786286704993665;
        points[3] = 0.5384693101056831;
        weights[4] = 0.2369268850561891;
        points[4] = 0.9061798459386640;
    elif (n == 8):
        weights[0] = 0.1012285362903763;
        points[0] = -0.9602898564975363;
        weights[1] = 0.2223810344533745;
        points[1] = -0.7966664774136267;
        weights[2] = 0.3137066458778873;
        points[2] = -0.5255324099163290;
        weights[3] = 0.3626837833783620;
        points[3] = -0.1834346424956498;
        weights[4] = 0.3626837833783620;
        points[4] = 0.1834346424956498;
        weights[5] = 0.3137066458778873;
        points[5] = 0.5255324099163290;
        weights[6] = 0.2223810344533745;
        points[6] = 0.7966664774136267;
        weights[7] = 0.1012285362903763;
        points[7] = 0.9602898564975363;
    elif (n == 16):
        weights[0] = 0.0271524594117541;
        points[0] = -0.9894009349916499;
        weights[1] = 0.0622535239386479;
        points[1] = -0.9445750230732326;
        weights[2] = 0.0951585116824928;
        points[2] = -0.8656312023878318;
        weights[3] = 0.1246289712555339;
        points[3] = -0.7554044083550030;
        weights[4] = 0.1495959888165767;
        points[4] = -0.6178762444026438;
        weights[5] = 0.1691565193950025;
        points[5] = -0.4580167776572274;
        weights[6] = 0.1826034150449236;
        points[6] = -0.2816035507792589;
        weights[7] = 0.1894506104550685;
        points[7] = -0.0950125098376374;
        weights[8] = 0.1894506104550685;
        points[8] = 0.0950125098376374;
        weights[9] = 0.1826034150449236;
        points[9] = 0.2816035507792589;
        weights[10] = 0.1691565193950025;
        points[10] = 0.4580167776572274;
        weights[11] = 0.1495959888165767;
        points[11] = 0.6178762444026438;
        weights[12] = 0.1246289712555339;
        points[12] = 0.7554044083550030;
        weights[13] = 0.0951585116824928;
        points[13] = 0.8656312023878318;
        weights[14] = 0.0622535239386479;
        points[14] = 0.9445750230732326;
        weights[15] = 0.0271524594117541;
        points[15] = 0.9894009349916499;
    else:
        print("No weights for that value of n")
    return weights, points
